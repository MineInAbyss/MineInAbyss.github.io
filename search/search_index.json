{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Welcome to the Mine in Abyss developer docs. We keep documentation for our major projects here. Anyone interested in contributing can visit our Outline page for guides, conventions, and more!</p> <p>About Mine in Abyss I want to contribute</p>"},{"location":"#faq","title":"FAQ","text":"<p>Can I use your code in my projects?</p> <p>We try to keep everything we make open source, mostly under the very permissive MIT license which allows you to use and extend upon our plugins without asking. Be sure to read a project's license for specific details.  You can find everything on our  GitHub organization.</p> <p>What's the best way to reach out if I have questions?</p> <p>You can reach us in  <code>#plugin-dev</code> on Discord. You may need to give yourself the coding club role to view the channel.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Geary</li> <li>Geary for Minecraft</li> <li>Idofront</li> <li>Other</li> </ul>"},{"location":"coding/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Quickstart</li> <li>Learn to Code</li> <li>Conventions</li> <li>Private assets</li> <li>Dependencies</li> <li>Server management</li> <li>Resources</li> </ul>"},{"location":"coding/private-assets/","title":"Private assets","text":"<p>Let's explore how to get started with parts of the project that aren't publicly accessible. Access will be granted based on developer needs, but most of this stuff is already set up on our dev server!</p>"},{"location":"coding/private-assets/#set-up-resources-auth","title":"Set up resources auth","text":"<p>Let's explore some variables that you'll need to set up to access private resources. Pass these along into docker-compose.</p> <pre><code>KEEPUP_GITHUB_AUTH_TOKEN=&lt;auth token for keepup to not get ratelimited/download private plugins if ever needed&gt;\nPACKY_ACCESS_TOKEN=&lt;token for packy to read private repos&gt;\nPRIVATE_PLUGINS_TOKEN=&lt;reposilite token for keepup to download private plugins&gt;\n</code></pre>"},{"location":"coding/private-assets/#bbmodels","title":"BBModels","text":"<p>We serve generated BBModel files using packy, and bind a clone repo from our filesystem. With the GitHub CLI installed you can do,</p> <pre><code>cd /opt/docker/data/\ngh auth login\ngh repo clone MineInAbyss/BBModel-Files\n</code></pre> <p>Then bind the volume,</p> <pre><code>volumes:\n  - \"/opt/docker/data/BBModel-Files/blueprints:/data/plugins/ModelEngine/blueprints\"\n</code></pre>"},{"location":"coding/private-assets/#download-from-world-backup","title":"Download from world backup","text":"<p>Set up a backup remote in rclone and run the following (changing -t to your world location),</p> <pre><code>restic restore latest -r rclone:mineinabyss:build --target /opt/docker/data/minecraft/mineinabyss/world\n</code></pre>"},{"location":"coding/quickstart/","title":"Quickstart","text":"<p>Let's set up a local server and dev environment. If you're new to programming, continue with the guide on the sidebar and come back here afterward!</p> <p>Note</p> <p>If you wish to contribute with other aspects of the project, such as art, design, or building, check out mineinabyss.com/contributing.</p>"},{"location":"coding/quickstart/#ide","title":"IDE","text":"<ul> <li>Install  IntelliJ IDEA</li> <li>Install a Java 21 JDK, most easily via IntelliJ using <code>Ctrl+Alt+Shift+S</code>, then clicking the dropdown in project settings.</li> <li>Set your server plugin path in <code>~/.gradle/gradle.properties</code> (see Configuring gradle below), we also recommend some other settings for better performance.</li> <li>Build the project with gradle (see Building a project below).</li> <li>Our composite-projects repo can be useful for working on multiple projects at once, or just clone the repos you need.</li> </ul>"},{"location":"coding/quickstart/#server","title":"Server","text":"<ul> <li>Install Docker, follow  Docker's install guide.</li> <li>Create a server directory and enter it.</li> <li>Make a file named <code>docker-compose.yml</code> and paste the config from below.</li> <li>Server config and plugins will be downloaded automatically using Keepup, if you build any plugins locally, Keepup will use yours instead.</li> <li>You can create a <code>.env</code> file in the same directory to pass secrets (ex. to download our mob models)</li> </ul> Simple server <pre><code>version: \"3\"\nservices:\n  mineinabyss:\n    image: ghcr.io/mineinabyss/minecraft:master\n    container_name: mineinabyss\n    ports:\n      - \"25565:25565\"\n      - \"5005:5005\" # For debugging\n      - \"8082:8082\" # Packy server port\n    environment:\n      SERVER_NAME: \"dev\" # Defines what plugins and configs to pull, dev is a reasonable option\n      EULA: true\n      TYPE: PAPER\n      VERSION: \"1.20.4\"\n      EXEC_DIRECTLY: true\n      USE_AIKAR_FLAGS: true\n      JVM_OPTS: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005\" # Enables live debugging\n      PACKY_PUBLIC_ADDRESS: http://localhost:8082\n      ANSIBLE_PULL_BRANCH: \"prod\" # develop may also be useful\n      # Options you can fiddle with\n      # ANSIBLE: \"false\" # Disable server config copying\n      # ANSIBLE_PULL: \"false\" # Don't pull (use local config for testing)\n      # KEEPUP: \"false\" # Disable plugin downloads\n      # KEEPUP_OVERRIDE_GITHUB_RELEASE: \"LATEST\" # Auto download latest releases/snapshots for plugins\n      # KEEPUP_JSON_PATH: \"mineinabyss.production-basic\" # Set exact plugins to pull\n    volumes:\n      # Change location as needed, relative paths are supported\n      - \"/opt/docker/data/minecraft/mineinabyss:/data\"\n      - \"/opt/docker/data/minecraft/server-config:/server-config\"\n        # Replace with the path to your local config for testing\n        # - \"~/projects/server-config:/server-config\"\n    # Allows 'docker attach' to work\n    stdin_open: true\n    tty: true\n</code></pre> <p>More environment options avialable on GitHub.</p>"},{"location":"coding/quickstart/#running-the-server","title":"Running the server","text":"<ul> <li>Install lazydocker or Docker Desktop for a GUI to manage your containers.</li> <li>Run <code>docker-compose up -d</code> in the directory of your <code>docker-compose.yml</code> to start the server in the background.</li> <li>Some IDEs like VSCode or Intellij let you manage Docker containers too, it may be convenient to open your entire minecraft folder to be able to modify the compose file and see local configs.</li> <li>Connect to <code>localhost</code> in Minecraft to join the server.</li> <li>Op yourself by attaching to your container (<code>a</code> in lazydocker) or <code>docker attach mineinabyss</code>.</li> </ul>"},{"location":"coding/quickstart/#extras","title":"Extras","text":""},{"location":"coding/quickstart/#configuring-gradle","title":"Configuring gradle","text":"<p>Gradle has a global configuration file located at <code>~/.gradle/gradle.properties</code> (<code>~</code> being your user directory). Create the file and add the lines below:</p> <pre><code>plugin_path=path/to/my/server/plugins\npaperweight.experimental.sharedCaches=true\n</code></pre> <ul> <li><code>plugin_path</code> will instruct our builds to copy the final jar into this path</li> <li><code>paperweight.experimental.sharedCaches</code> will reuse the same decompiled Minecraft server across projects, saving a lot of time</li> </ul>"},{"location":"coding/quickstart/#building-a-project","title":"Building a project","text":"<p>You do not need to install anything to build. You can do it from command line or IntelliJ (running builds through IntelliJ will be more convenient)</p>  Windows  MacOS/Linux <pre><code>cd &lt;insert project directory here&gt;\ngradlew.bat build\n</code></pre> <pre><code>cd &lt;insert project directory here&gt;\n./gradlew build\n</code></pre> IntelliJ gradle tutorial <p>This video shows how to run Gradle tasks like build, as well as how to work with Gradle in general. Feel free to watch the short clip or full video.</p> <p></p> <p>You can also find documentation here.</p>"},{"location":"coding/quickstart/#private-assets","title":"Private assets","text":"<ul> <li>If you need BBModels or other private assets see Private Assets, or test on the dev server. You might be ratelimited by GitHub when downloading plugins, the page also explains how to set up your own token for it.</li> <li>If you need access to internal services like browsing files or restarting containers/seeing dev logs, let us know in Discord, you will be added to a team on GitHub.</li> </ul>"},{"location":"coding/conventions/code-conventions/","title":"Coding conventions","text":"<p>We follow the Android Kotlin Style Guide.</p> <p>IntelliJ has an autoformatter that follows this style guide, use <code>Ctrl+Alt+L</code> to run it. If the formatter makes no changes, your code style is good to go.</p> If you need to tell IntelliJ to use the new code style, go here <p></p>"},{"location":"coding/conventions/code-conventions/#use-conventional-commits","title":"Use conventional commits","text":"<p>We use Conventional Commits to format our commit messages. You can see tags you can use that will show up in changelogs here. You can use multi-line messages to add more than one tag at a time. Here's an example valid commit</p> <pre><code>feat!: I made breaking changes!\nfix: I fixed a bug\n\nHere's a longer explanation\n\nchore: I did some boring stuff\n</code></pre>"},{"location":"coding/conventions/code-conventions/#idofront","title":"Idofront","text":"<p>Idofront is a library we share between most of our plugins that adds helper functions, a command DSL, and more. You can find documentation for it in the Idofront tab.</p>"},{"location":"coding/conventions/code-conventions/#publishing","title":"Publishing","text":"<p>Some of our projects are libraries that other projects need to depend on. For example, MineInAbyss depends on DeeperWorld. We have our own maven repository (repo.mineinabyss.com) which lets us add these dependencies in Gradle.</p> <p>Please use <code>com.mineinabyss</code> as the group id for new projects for consistency.</p>"},{"location":"coding/conventions/new-project/","title":"Starting a New Project","text":"<p>We provide a  project template, which you can use to start a new project. We will add instructions to the README file to help you get started in the future.</p>"},{"location":"coding/conventions/new-project/#licensing","title":"Licensing","text":"<p>We don't enforce any specific license for Mine in Abyss related projects, but have some general recommendations:</p> <ul> <li>Use MIT for libraries or less important plugins.</li> <li>Use AGPL for plugins you don't want someone to be able to continue developing in a closed source manner. We recommend AGPL over GPL since plugins don't need to be installed by end users, and the GPL doesn't force someone to distribute source code in this case.</li> <li>Use a Creative Commons license for non-code assets like textures or sounds (ex. we sometimes use the more restrictive NC variant that force non-commercial use.)</li> </ul>"},{"location":"coding/conventions/versioning/","title":"Versioning","text":"<p>We have a plugin called autoversion in Idofront that will automatically append a PATCH (third) version number. You can manually set the rest, ex. <code>0.8</code></p> <p>Keep the <code>version</code> and <code>group</code> properties in a project's <code>gradle.properties</code> file and try to follow the MAJOR.MINOR pattern as described by semver, with the PATCH appended automatically by autoversion.</p> <p>Use the <code>develop</code> branch to automatically create pre-releases with <code>-dev.x</code> appended to the end.</p>"},{"location":"coding/deps/gradle/","title":"Gradle","text":"<p>We have a big version catalog in Idofront that all other projects depend on. It includes versions for Kotlin, Minecraft, common gradle plugins, other Paper plugins, and more. These can also be overridden for specific projects when importing the catalog.</p>"},{"location":"coding/deps/gradle/#updatingadding-dependencies","title":"Updating/adding dependencies","text":"<p>To update versions everywhere, or add a new dependency that may be useful to other plugins, change the <code>libs.versions.toml</code> file in Idofront.</p> <p>Only deps in the <code>platform</code> bundle will be shaded into the Idofront server jar. A lot of dependencies are other plugins, or compiler plugins that don't need to be in the plugin jar.</p>"},{"location":"coding/deps/gradle/#automatically-update-dependencies-in-idofront","title":"Automatically update dependencies in Idofront","text":"<p>Run <code>gradle versionCatalogUpdate</code> in Idofront to automatically update the <code>libs.versions.toml</code> file, by default it ignores prereleases.</p>"},{"location":"coding/deps/gradle/#update-blockers","title":"Update blockers","text":"<p>Compose Multiplatform is usually the biggest blocker for updating Kotlin version. You may mitigate this by changing the compiler version used by compose, but this can be buggy and generally it's better to wait for it to update.</p>"},{"location":"coding/deps/gradle/#update-frequency","title":"Update frequency","text":"<p>We've had many problems in the past with updating too much too fast. Don't make breaking version changes more than like once a quarter, updating all the plugins is a pain .</p>"},{"location":"coding/deps/server/","title":"Server","text":"<ul> <li> <p>We use  Keepup to automatically download plugins on our servers. Usage instructions are in the README.</p> </li> <li> <p>Plugin versions themselves are defined in MineInAbyss/server-config.</p> </li> </ul>"},{"location":"coding/learn/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kotlin*</li> <li>github*</li> </ul>"},{"location":"coding/learn/github/","title":"Collaborating with GitHub","text":"<p>Definition: Git</p> <p>A tool that helps people collaborate on code and keep a history of changes. A project tracked in git is called a repository.</p> <p>Definition: GitHub</p> <p>A website we use to host our git repositories and track things that need to be coded under issues.</p>"},{"location":"coding/learn/github/#how-to-contribute-with-git-and-github","title":"How to contribute with git and GitHub","text":"<p>Below is a great in-depth video guide going through the entire process of contributing to a project like ours with IntelliJ. It's a little lengthy but will teach you everything you need to know to work efficiently with git and GitHub.</p> <p>If you're into reading, you can also check out  GitHub's quickstart guide.</p>"},{"location":"coding/learn/kotlin/","title":"Learn Kotlin","text":"<p>We use  Kotlin to make our plugins. Kotlin is built on the same thing as Java, so we often interact with Java as well. This guide will help you start learning Kotlin or programming in general.</p>"},{"location":"coding/learn/kotlin/#im-new-to-coding","title":"I'm new to coding","text":"<p>Recommended: Kotlin Basics track</p> <p>A free learning track on Hyperskill. It splits everything into small modules starting from 0 and building up to a project of your choice.</p>"},{"location":"coding/learn/kotlin/#im-new-to-kotlin","title":"I'm new to Kotlin","text":"<p>Recommended: Kotlin Learning Materials</p> <p>Try the materials in order, the basic syntax and idioms pages should be enough to let you hop into one of our projects!</p>"},{"location":"coding/resources/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Version List</li> <li>Build matrix</li> </ul>"},{"location":"coding/resources/build-matrix/","title":"Build matrix","text":"Name Release Prod Develop <code>MineInAbyss</code> <code>Geary</code> <code>Geary-papermc</code> <code>Mobzy</code> <code>Looty</code> <code>Blocky</code>"},{"location":"coding/resources/version-list/","title":"Plugin version list","text":"<ul> <li>Preferred gradle version</li> </ul>"},{"location":"coding/resources/version-list/#dependencies","title":"Dependencies","text":"<ul> <li><code>geary</code></li> <li><code>idofront</code></li> <li><code>guiy-compose</code></li> <li><code>protocolburrito</code></li> </ul>"},{"location":"coding/resources/version-list/#general-plugins","title":"General plugins","text":"<ul> <li><code>blocky</code></li> <li><code>chatty</code></li> <li><code>looty</code></li> <li><code>mobzy</code></li> <li><code>emojy</code></li> <li><code>packy</code></li> <li><code>extracommands</code></li> </ul>"},{"location":"coding/resources/version-list/#server-plugins","title":"Server plugins","text":"<ul> <li><code>bonfire</code></li> <li><code>deeperworld</code></li> <li><code>mineinabyss</code></li> <li><code>stamina-climb</code></li> <li><code>bonehurtingjuice</code></li> </ul>"},{"location":"coding/resources/version-list/#dependants-tree","title":"Dependants tree","text":"<p>Deeper items depend on shallower items.</p> <ul> <li><code>idofront</code> (pretty much everything)</li> <li><code>geary</code><ul> <li><code>blocky</code></li> <li><code>chatty</code></li> <li><code>looty</code></li> <li><code>mobzy</code></li> <li><code>emojy</code></li> <li><code>bonfire</code></li> <li><code>mineinabyss</code></li> <li><code>staminaclimb</code></li> <li><code>packy</code></li> <li><code>eternalfortune</code></li> </ul> </li> <li><code>mineinabyss</code><ul> <li><code>deeperworld</code></li> </ul> </li> </ul>"},{"location":"coding/server-management/overview/","title":"Overview","text":"<p>This page goes over general sysadmin info. We try to be open about these things so other projects can benefit from our work. Most of the projects linked here go into a lot more detail about how they work, be sure to check them out!</p>"},{"location":"coding/server-management/overview/#hosting","title":"Hosting","text":"<p>We use a dedicated machine on Hetzner for hosting. It\u2019s located in Germany as it's cheaper compared to services like OVH in America.</p>"},{"location":"coding/server-management/overview/#infra","title":"Infra","text":"<p>Infra is handled via Docker and Ansible</p> <ul> <li>We publish our own server image on MineInAbyss/Docker-images </li> <li>We keep docker-compose stacks at MineInAbyss/Docker-stacks</li> <li>We manage machine setup with Ansible at MineInAbyss/ansible-in-abyss</li> </ul>"},{"location":"coding/server-management/overview/#domain","title":"Domain","text":"<p>We use Cloudflare for DNS as well as a registrar. We have a wildcard domain set up to get SSL on all internal services easily with Traefik.</p>"},{"location":"geary-minecraft/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Content packs</li> <li>Actions &amp; Observers</li> <li>Plugin Developers</li> </ul>"},{"location":"geary-minecraft/actions/","title":"Introduction","text":"<p>The action system is used across items, entities, and blocks to code custom effects. Actions can run on specific events using the <code>observe</code> component (ex. a player clicking a custom item), or repeat passively using the <code>passive</code> component.</p>"},{"location":"geary-minecraft/actions/#observe-events","title":"Observe events","text":"<p>Any Geary prefab can observe events using the <code>observe</code> component. It takes a map of event names found in Events to an Action Group.</p>"},{"location":"geary-minecraft/actions/#examples","title":"Examples","text":"<pre><code>observe:\n  itemLeftClick:\n    - become: parent\n    - sendActionBar: \"Right clicked item!\"\n</code></pre>"},{"location":"geary-minecraft/actions/#passive-actions","title":"Passive actions","text":"<p>Passive actions run continuously on a Geary prefab, optionally matching against certain components. The <code>passive</code> component takes a list of entries as described below</p>"},{"location":"geary-minecraft/actions/#parameters","title":"Parameters","text":"Name Type Description match List A list of component names an instance of this prefab must have for the passive system to run every Duration How often to run this action group run ActionGroup The actions to run when an instance is matched"},{"location":"geary-minecraft/actions/#examples_1","title":"Examples","text":"<pre><code>passive:\n  - match: [ inInventory ]\n    every: 1s\n    run:\n      - become: parent\n      - ensure:\n          mythicConditions:\n            - health{h=&lt;5}\n      - particle:\n          at: \"{{ entity.getLocation }}\"\n          particle: CLOUD\n          offsetY: 1\n          count: 3\n          speed: 0\n      - applyPotionEffects:\n          - type: minecraft:speed\n            duration: 3s\n            amplifier: 2\n            hasParticles: false\n</code></pre>"},{"location":"geary-minecraft/actions/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Introduction</li> <li>Actions</li> <li>Conditions</li> <li>Events</li> </ul>"},{"location":"geary-minecraft/actions/actions/","title":"Actions","text":"<p>An action performs a single effect in the game. They are used by the action system to define what happens on different events, ex. when a player right-clicks a custom item.</p>"},{"location":"geary-minecraft/actions/actions/#available-actions","title":"Available actions","text":""},{"location":"geary-minecraft/actions/actions/any/become/","title":"become","text":""},{"location":"geary-minecraft/actions/actions/any/become/#examples","title":"Examples","text":"<pre><code>become: parent\n</code></pre>"},{"location":"geary-minecraft/actions/actions/any/ensure/","title":"ensure","text":""},{"location":"geary-minecraft/actions/actions/any/ensure/#examples","title":"Examples","text":"<pre><code>ensure:\n  hasConsumable:\n    type: mineinabyss:flamethrower_fuel\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/applyPotionEffects/","title":"applyPotionEffects","text":""},{"location":"geary-minecraft/actions/actions/entity/applyPotionEffects/#examples","title":"Examples","text":"<pre><code>applyPotionEffects:\n  - type: minecraft:speed\n    duration: 3s\n    amplifier: 2\n    hasParticles: false\n  - type: minecraft:jump_boost\n    duration: 5s\n    amplifier: 2\n    hasParticles: false\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/consumeItem/","title":"consumeItem","text":""},{"location":"geary-minecraft/actions/actions/entity/consumeItem/#examples","title":"Examples","text":"<pre><code>consumeItem:\n  type: mineinabyss:flamethrower_fuel\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/playSound/","title":"playSound","text":""},{"location":"geary-minecraft/actions/actions/entity/playSound/#examples","title":"Examples","text":"<pre><code>playSound:\n  sound: minecraft:entity.generic.extinguish_fire\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/sendActionBar/","title":"sendActionBar","text":""},{"location":"geary-minecraft/actions/actions/entity/sendActionBar/#examples","title":"Examples","text":"<pre><code>sendActionBar:\n  text: &lt;red&gt;Out of fuel\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/startCooldown/","title":"startCooldown","text":""},{"location":"geary-minecraft/actions/actions/entity/startCooldown/#examples","title":"Examples","text":"<pre><code>startCooldown:\n  id: flamethrower\n  length: 2s\n  display: &lt;dark_aqua&gt;Flamethrower\n</code></pre>"},{"location":"geary-minecraft/actions/actions/location/explode/","title":"explode","text":""},{"location":"geary-minecraft/actions/actions/location/explode/#examples","title":"Examples","text":"<pre><code>explode:\n  breakBlocks: false\n  power: 2\n  at: \"{{ entity.getTargetBlock { maxDistance: 10 } }}\"\n</code></pre>"},{"location":"geary-minecraft/actions/actions/location/particle/","title":"particle","text":""},{"location":"geary-minecraft/actions/actions/location/particle/#examples","title":"Examples","text":"<pre><code>particle:\n  at: \"{{ entity.getLocation }}\"\n  particle: CLOUD\n  offsetY: 1\n  count: 3\n</code></pre>"},{"location":"geary-minecraft/actions/actions/location/smite/","title":"smite","text":""},{"location":"geary-minecraft/actions/actions/location/smite/#examples","title":"Examples","text":"<pre><code>smite:\n  at: \"{{ targetBlock }}\"\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/","title":"Conditions","text":"<p>Conditions are checks performed before running actions. They can be used across various configs, including the action system and spawning system.</p>"},{"location":"geary-minecraft/actions/conditions/#available-conditions","title":"Available conditions","text":""},{"location":"geary-minecraft/actions/conditions/any/chance/","title":"chance","text":""},{"location":"geary-minecraft/actions/conditions/any/chance/#examples","title":"Examples","text":"<pre><code>chance: 0.5\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/any/cooldownsComplete/","title":"cooldownsComplete","text":""},{"location":"geary-minecraft/actions/conditions/any/cooldownsComplete/#examples","title":"Examples","text":"<pre><code>cooldownsComplete: [ \"explosion\" ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/any/mythicConditions/","title":"mythicConditions","text":""},{"location":"geary-minecraft/actions/conditions/any/mythicConditions/#examples","title":"Examples","text":"<pre><code>mythicConditions:\n  - lightlevelfromblocks{l=0}\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/block/","title":"block","text":""},{"location":"geary-minecraft/actions/conditions/block/block/#examples","title":"Examples","text":"<pre><code>block:\n  allow: [ stone, grass_block ]\n</code></pre> <pre><code>block:\n  deny: [ water, lava ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/blockAbove/","title":"blockAbove","text":""},{"location":"geary-minecraft/actions/conditions/block/blockAbove/#examples","title":"Examples","text":"<pre><code>blockAbove:\n  allow: [ stone, grass_block ]\n</code></pre> <pre><code>blockAbove:\n  deny: [ water, lava ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/blockBelow/","title":"blockBelow","text":""},{"location":"geary-minecraft/actions/conditions/block/blockBelow/#examples","title":"Examples","text":"<pre><code>blockBelow:\n  allow: [ stone, grass_block ]\n</code></pre> <pre><code>blockBelow:\n  deny: [ water, lava ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/gap/","title":"gap","text":""},{"location":"geary-minecraft/actions/conditions/block/gap/#examples","title":"Examples","text":"<pre><code>gap: 10..512\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/isSourceLiquid/","title":"isSourceLiquid","text":""},{"location":"geary-minecraft/actions/conditions/block/isSourceLiquid/#examples","title":"Examples","text":"<pre><code>isSourceLiquid: {}\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/maxNearby/","title":"maxNearby","text":""},{"location":"geary-minecraft/actions/conditions/block/maxNearby/#examples","title":"Examples","text":"<pre><code>maxNearby:\n  amount: 3\n</code></pre> <pre><code>maxNearby:\n  amount: 2\n  radius: 10\n  types: [ \"mm:myMythicMob\" ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/entity/check_entity/","title":"Examples","text":"<pre><code>check.entity:\n  leashed: true\n  inWater: false\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/entity/hasConsumable/","title":"Examples","text":"<pre><code>hasConsumable:\n  type: mineinabyss:flamethrower_fuel\n  amount: 2\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/entity/player/","title":"Examples","text":"<pre><code>check.entity:\n  sneaking: true\n  invisible: false\n</code></pre>"},{"location":"geary-minecraft/actions/events/","title":"Events","text":"<p>Events are triggers for your skills. The serialized tag follows the usual component format, with namespaces optionally imported. These generally bridge Bukkit events and may hold extra info, explore them in the sidebar.</p>"},{"location":"geary-minecraft/actions/events/#entities","title":"Entities","text":"Name Desc onDamaged Entity was damaged by another entity onDamageOther Entity damaged another entity onSheared Entity got sheared onSpawn Entity spawned (for the first time) onDeath Entity died onLoad Entity was loaded (i.e. from spawn or chunk load) onUnload Entity was unloaded from a chunk"},{"location":"geary-minecraft/actions/events/#items","title":"Items","text":"Name Desc itemInteract Item interacts with something itemLeftClick Item left clicked air or block itemLeftClickBlock Item left clicked a block itemRightClick Item right clicked air or block itemRightClickBlock Item right clicked a block itemRightClickEntity Item right clicked an entity itemConsumed Item was consumed, ex. eaten or drunk itemBreak Item broke from low durability itemDrop Item was dropped by a player"},{"location":"geary-minecraft/actions/target-selectors/","title":"Target selectors","text":"<p>Target selectors (defined with the <code>using</code> tag) specify the entity actions run on. Subskills will inherit the target selector of their parent skill, unless they specify their own.</p>"},{"location":"geary-minecraft/actions/target-selectors/#event-targets","title":"Event targets","text":"<p>Events specify their own targets based on involved entities. Since the event is carried through to subskills, they may swap back and forth between involved entities.</p>"},{"location":"geary-minecraft/actions/target-selectors/#variable-targets","title":"Variable targets","text":"<p>Targets can also reference entities via variables (currently only inline). Lists of entities are also supported, and will be iterated over. On the sidebar, you will find some components for reading entities that may be used by target selectors.</p> <p>Example of a list of targets defined as an inline variable:</p> <pre><code>using: { nearbyEntities: { radius: 10 } }\n</code></pre>"},{"location":"geary-minecraft/actions/target-selectors/mob-selectors/","title":"Bukkit entity selectors","text":"<p>These selectors require a Bukkit entity target, ex. nearby entities will find entities near the current Bukkit entity. </p>"},{"location":"geary-minecraft/actions/target-selectors/mob-selectors/#nearby-entities","title":"Nearby entities","text":"<pre><code>nearbyEntities:\n  radius: 10\n</code></pre>"},{"location":"geary-minecraft/actions/variables/","title":"Variables","text":"<p>Variables are supported by certain actions, and let you dynamically read data in skills. Each variable specifies a type, followed by a camelCased name, and may be specified in one of three ways:</p>"},{"location":"geary-minecraft/actions/variables/#inline","title":"Inline","text":"<p>Since all types are just component references, they may be defined like any serializable component:</p> <pre><code>vars:\n  - string name: \"Just a string\"\n  - int age: 42\n  - geary:playSound extinguish:\n      sound: minecraft:entity.generic.extinguish_fire\n</code></pre>"},{"location":"geary-minecraft/actions/variables/#references","title":"References","text":"<p>Variables may reference other variables defined before them, (or soon data stored on entities).</p> <pre><code>vars:\n  - string name: $otherName\n</code></pre>"},{"location":"geary-minecraft/actions/variables/#derived","title":"Derived","text":"<p>Derived variables run an event that reads data on a target. These are useful for getting data from your events. See Derived Variables for a list of options.</p> <pre><code>using: itemHolder\nvars:\n  # Read the location of itemHolder\n  - derived location targetLoc:\n      read.location: { }\n</code></pre>"},{"location":"geary-minecraft/actions/variables/derived-variables/","title":"Derived variables","text":"<p>ABC</p>"},{"location":"geary-minecraft/content-packs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>File structure</li> <li>Commands</li> <li>Items</li> <li>Blocks</li> <li>Mobs</li> <li>Spawning</li> </ul>"},{"location":"geary-minecraft/content-packs/commands/","title":"Commands","text":""},{"location":"geary-minecraft/content-packs/commands/#spawning-mobs-and-items","title":"Spawning mobs and items","text":"<p><code>/geary mobs spawn &lt;mob name&gt; [count]</code> \u2014 Spawn a custom mob</p> <p><code>/geary give &lt;item name&gt; [count]</code> \u2014 Give yourself an item, including custom blocks</p> <p><code>/blocky menu</code> \u2014 Open custom block menu, similar to creative inventory</p>"},{"location":"geary-minecraft/content-packs/commands/#prefabs","title":"Prefabs","text":"<p><code>/geary prefab reload &lt;namespace&gt;:&lt;name&gt;</code> \u2014 Re-read a prefab from disk. It will be updated live, including any instances spawned in the world.</p> <p><code>/geary prefab load &lt;namespace&gt; path/to/file.yml</code> \u2014 Load a file that was not previously loaded by geary.</p>"},{"location":"geary-minecraft/content-packs/file-structure/","title":"File structure","text":"<p>Geary supports loading content from its config folder. We write custom mobs, items, or blocks in config files called prefabs.  When we spawn a mob or create an item, it is an instance of a prefab and inherits all of its components.</p>"},{"location":"geary-minecraft/content-packs/file-structure/#directory-structure","title":"Directory structure","text":"<p>Place Geary config files in <code>plugins/Geary/prefabs/&lt;namespace&gt;</code>, where <code>&lt;namespace&gt;</code> is unique to your project (ex. mineinabyss). Files will be loaded by name regardless of folder structure, for example:</p> <pre><code>Geary/\n\u2514\u2500\u2500 prefabs/\n    \u2514\u2500\u2500 mineinabyss/\n        \u2514\u2500\u2500 items/\n            \u251c\u2500\u2500 drops\n            \u251c\u2500\u2500 equipment\n            \u251c\u2500\u2500 food/\n            \u2502   \u251c\u2500\u2500 cut_meat_cooked.yml\n            \u2502   \u2514\u2500\u2500 cut_meat_raw.yml\n            \u251c\u2500\u2500 materials\n            \u251c\u2500\u2500 misc\n            \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"geary-minecraft/content-packs/file-structure/#writing-a-prefab","title":"Writing a prefab","text":"<p>Prefab files contain a list of components. Geary comes with components that mark your prefab as an item mob, or block. Note that other than these specialized components, there is no difference between any type of prefab, in fact Geary provides many components that can be used identically across items, mobs, or blocks (ex. the <code>observe</code> component in Geary's action system.)</p> <p>In the next few pages we'll explore how to create each kind of prefab, but first we'll explain the common format:</p> <ul> <li>Components are defined by their name, ex. this file defines <code>set.item</code> and <code>resourcepack</code> components: abyssal_snail_gunk.yml<pre><code>set.item:\n  item:\n    type: minecraft:slime_ball\n    itemName: &lt;reset&gt;&lt;#785F34&gt;Abyssal Snail Gunk\n    customModelData: 1\nresourcepack:\n  textures: mineinabyss:item/creature_drops/abyssal_snail_gunk\n</code></pre></li> <li> <p>Any components not provided by geary must include a namespace, ex. <code>blocky:sound</code>: charcoal_sand_ore.yml<pre><code>set.block:\n    blockType: NOTEBLOCK\n    blockId: 1\nblocky:sound:\n    placeSound: minecraft:block.amethyst_block.place\n    breakSound: minecraft:block.amethyst_block.break\n</code></pre></p> </li> <li> <p>Tip</p> <p>We provide a json schema here for automatic code completion, our <code>server-config</code> project shows how to set this up in IntelliJ as well as GitHub's web editor using the YAML plugin.</p> </li> </ul>"},{"location":"geary-minecraft/content-packs/items/","title":"Creating items","text":"<p>Item prefabs are defined by the <code>set.item</code> component with a Serializable Item. By far the best way to see all configuration options is to use our JSON schema, as shown in File structure, but we'll go over common use-cases.</p>"},{"location":"geary-minecraft/content-packs/items/#examples","title":"Examples","text":""},{"location":"geary-minecraft/content-packs/items/#common-options","title":"Common options","text":"<p>This item shows off some commonly used options for custom items</p> <pre><code>set.item:\n  item:\n    type: stone\n    itemName: &lt;white&gt;Custom Item\n    lore:\n      - &lt;red&gt;A fancy lore line\n    customModelData: 100\n    maxStackSize: 99\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/#custom-food","title":"Custom food","text":"<p>We support Minecraft's food component, which can apply custom effects, eating time, and more:</p> <pre><code>set.item:\n  item:\n    type: sand\n    food:\n      saturation: 1.8\n      nutrition: 3\n      usingConvertsTo: minecraft:red_sand\n      effects:\n        - probability: 0.35\n          effect:\n            type: minecraft:hunger\n            duration: 10s\n            amplifier: 2\n            isAmbient: true\n            hasParticles: true\n            hasIcon: true\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/#tools","title":"Tools","text":"<p>Use Minecraft's tool component to create tools with custom mining speeds:</p> <pre><code>set.item:\n  item:\n    itemName: Charcoal Sand Sickle\n    type: minecraft:wooden_hoe\n    customModelData: 7\n    durability: 3000\n    tool:\n      rules:\n        - blockTypes:\n            - \"minecraft:leaves\"\n          speed: 8.0\n          correctForDrops: true\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Creating items</li> <li>Resourcepack</li> <li>Custom recipes</li> <li>Serializable Item</li> </ul>"},{"location":"geary-minecraft/content-packs/items/recipes/","title":"Custom recipes","text":"<p>Geary provides an extensive recipe system for custom or vanilla items.</p>"},{"location":"geary-minecraft/content-packs/items/recipes/#create-recipes","title":"Create recipes","text":"<p>Create any kind of recipe for an item, all types listed below.</p> <p>If the recipe is defined in the item prefab itself, <code>result</code> does not need to be specified, the item will be the result.</p> <pre><code>set.recipes:\n  recipes: # (1)!\n    - type: shaped\n      ...\n  discoverRecipes: true # (2)!\n  group: \"\" # (3)!\n  removeRecipes: [] # (4)!\n  result: ... # (5)!\n</code></pre> <ol> <li>List of recipes, see available types below.</li> <li>Default <code>false</code>, Whether to unlock the recipe automatically when a player joins the server</li> <li>Default empty, set the group of this recipe. Recipes with the same group may be grouped together when displayed in the client</li> <li>Optional, a list of existing recipes to remove (ex. if migrating from one recipe to a new one)</li> <li>A Serializable Item, or don't pass to use this prefab's <code>set.item</code></li> </ol>"},{"location":"geary-minecraft/content-packs/items/recipes/#set-potionmixes","title":"Set potionmixes","text":"<pre><code>set.potionMixes:\n  potionmixes: # (1)!\n    - input: ... \n      ingredient: { type: sugar }\n  result: ... # (2)!\n</code></pre> <ol> <li>List of potion mixes, as defined below</li> <li>A Serializable Item, or don't pass to use this prefab's <code>set.item</code></li> </ol>"},{"location":"geary-minecraft/content-packs/items/recipes/#recipe-types","title":"Recipe types","text":""},{"location":"geary-minecraft/content-packs/items/recipes/#shaped","title":"Shaped","text":"<p>Uses keys to define Serializable Items as ingredients. These keys can be used to describe a configuration as below</p> <pre><code>- type: shaped\n  items:\n    M: { type: gold_ingot }\n    S: { type: stick }\n  configuration: |-\n    | MM|\n    | SM|\n    |S  |\n</code></pre> <p>A smaller size can also be used for the configuration, ex:</p> <pre><code>configuration: |-\n  |MM|\n  |SM|\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#shapeless","title":"Shapeless","text":"<p>Takes a list of Serializable Items as ingredients, they may be placed in any shape.</p> <pre><code>- type: shapeless\n  items:\n    - type: gold_ingot\n    - prefab: myplugin:custom_item\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#cooking","title":"Cooking","text":"<p>There are several options for cooking recipes,  <code>furance</code>, <code>blasting</code>, <code>campfire</code>, <code>smoker</code>. The input is a Serializable Item that will be consumed.</p> <pre><code>- type: furnace\n  input: { prefab: mineinabyss:ashimite_meat_raw }\n  experience: 1f\n  cookingTime: 100\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#stonecutting","title":"Stonecutting","text":"<p>Input is a Serializable Item that will be consumed by the stonecutter.</p> <pre><code>- type: stonecutting\n  input: { type: stone }\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#smithing","title":"Smithing","text":""},{"location":"geary-minecraft/content-packs/items/recipes/#transform","title":"Transform","text":"<p>All inputs are Serializable Item. template, input, addition are ordered left to right in the smithing table. Ex. we have a template for a custom netherite upgrade:</p> <pre><code>- type: smithing_transform\n  template: { type: netherite_upgrade_smithing_template }\n  input: { prefab: mineinabyss:diamond_sickle }\n  addition: { type: netherite_ingot }\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#trim","title":"Trim","text":""},{"location":"geary-minecraft/content-packs/items/recipes/#potionmix","title":"Potionmix","text":"<p>All entries are Serializable Items, the input is the potion being brewed, and ingredient is the ingredient being added on top. If input is not specified, will use a water bottle.</p> <pre><code>- type: potionmix\n  input: ...\n  ingredient: { type: sugar }\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/resourcepack/","title":"Resourcepack","text":"<p>Geary provides a <code>resourcepack</code> component that will automatically generate custom item json files for you.</p> <p>First, enable resourcepack generation in Geary's <code>config.yml</code>:</p> <pre><code>resourcePack:\n  generate: true\n  # The path to generate the pack to from `plugins/Geary`\n  # Adding .zip to path will export as a zip instead of directory\n  outputPath: resourcepack.zip\n  # Points to a resourcepack in zip or directory format to merge into Geary's pack\n  includedPackPath: template_pack\n</code></pre> <p>Add your resourcepack files in <code>plugins/Geary/template_pack</code>, notably you only need to add textures for custom items:</p> <pre><code>template_pack/\n\u2514\u2500\u2500 assets/\n    \u2514\u2500\u2500 mineinabyss/\n        \u2514\u2500\u2500 textures/\n            \u2514\u2500\u2500 item/\n                \u2514\u2500\u2500 my_texture.png\n</code></pre> <p>Use the resourcepack component on your item:</p> <pre><code>set.item:\n  item:\n    type: stone\n    customModelData: 100\nresourcepack:\n  textures: my_addon:item/my_texture\n</code></pre> <p>This will automatically generate a <code>resourcepack.zip</code> with the right customModelData pointing to your texture. You can manually serve this file with your server, or use a plugin like Packy to automatically combine generated packs for you.</p>"},{"location":"geary-minecraft/content-packs/items/serializable-item/","title":"Serializable Item","text":"<p>We often need to reference an item in Geary, usually through our own SerializableItemStack. The item may inherit from other plugins or be configured in-place (ex referencing another prefab in a recipe, or defining the item itself.)</p> <p>All properties are optional, setting a property will override the vanilla value, below is an example of all properties:</p> <pre><code># You may use a vanilla item or inherit from another item system \ntype: stone # (1)!\nprefab: &lt;string&gt; # (2)!\ncrucibleItem: &lt;string&gt;\noraxenItem: &lt;string&gt;\nitemsadderItem: &lt;string&gt;\n\n# Override item properties\namount: 2\ncustomModelData: 42\ndisplayName: \"&lt;bold&gt;&lt;red&gt;Fancy stone\" # (3)!\nlore:\n  - \"Lore line 1\"\n  - \"&lt;red&gt;Formatted line 2\"\nunbreakable: false\ndamage: 0\nenchantments:\n  - enchant: minecraft:sharpness # (4)!\n    level: 3\nitemFlags: [ HIDE_ENCHANTS ] # (5)!\nattributeModifiers:\n  - attribute: GENERIC_ATTACK_DAMAGE # (6)!\n    modifier:\n      name: customAttribute\n      amount: 1.0\n      operation: ADD_NUMBER # (7)!\npotionData:\n  type: REGEN # (8)!\n  extended: true\n  upgraded: true\ncolor: '#fffff' # (9)!\nknowledgeBookRecipes: [ \"minecraft:gold_ingot_from_nuggets\" ] # (10)!\n</code></pre> <ol> <li>Vanilla item type, may be prefixed with <code>minecraft:</code> or written in all caps, ex: <code>minecraft:stone</code> or <code>STONE</code></li> <li>Geary prefab to read item off of. Must itself have a <code>geary:set.item</code> component</li> <li>All text lines support MiniMessage formatting</li> <li>Minecraft namespaced key for an enchant.</li> <li>List of ItemFlag values</li> <li>Attribute to modify</li> <li>Type of operation (add, multiple, etc), see AttributeModifier.Operation</li> <li>Potion type, see PotionType</li> <li>Potion color, in the form <code>#RRGGBB</code> or <code>r, g, b</code> with 0-255 values</li> <li>List of recipes to unlock in a knowledge book, use Minecraft namespaced keys for recipes.</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/","title":"Creating mobs","text":"<p>For mobs to be spawnable by Geary, the prefab must have a component that provides a Minecraft entity.</p>"},{"location":"geary-minecraft/content-packs/mobs/#vanilla-entity-type","title":"Vanilla entity type","text":"<p>The simplest component, just picks a type registered in Minecraft. This includes any custom mobs that may be registered via NMS. <pre><code>set.entityType: minecraft:slime\n</code></pre></p>"},{"location":"geary-minecraft/content-packs/mobs/#mythicmobs","title":"MythicMobs","text":"<pre><code>set.mythicMob: &lt;mythicMobKey&gt;\n</code></pre> <p>Where <code>&lt;mythicMobKey&gt;</code> is the root key in your MythicMob mob file, ex:</p> <pre><code>MyCustomPig:\n  Type: PIG\n  Health: 20\n  Options:\n    ...\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/#mythicmobs-integration","title":"MythicMobs integration","text":"<p>Alternatively, you may create and manage your mobs with MythicMobs and let them inherit any prefab using our prefabs skill:</p> <pre><code>MyCustomPig:\n  Skills:\n    - prefabs{p=mineinabyss:my_prefab} @self ~onSpawnOrLoad\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Creating mobs</li> <li>Components</li> </ul>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/","title":"Overrides","text":"<p>Components that replace vanilla behaviour with custom ones, often reimplemented by us.</p>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#any-mob","title":"Any mob","text":""},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#death-loot","title":"Death Loot","text":"<p>Items and exp to drop on a mob's death <pre><code>deathLoot:\n  exp: 10..20\n  deathCommands: [ \"say Hi\" ] # (1)!\n  drops: # (2)!\n    - item: { type: \"apple\" }\n      cooked: { type: \"golden_apple\" } # (4)!\n      cookExp: ... # (5)!\n      cookTime: ... # (6)!\n      amount: 1..2\n      dropChance: 0.5\n  ignoredCauses: [ SUFFOCATION ] # (3)!\n</code></pre></p> <ol> <li>List of commands to run on death</li> <li>A list of items to drop</li> <li>DamageCause, Do not drop items when entity dies of this cause</li> <li>Item to drop if using fire aspect on mob</li> <li>Default <code>0</code>, Amount of exp for cooking</li> <li>Default <code>200</code>. Amount of time cooking takes</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#sounds","title":"Sounds","text":"<p>Custom sound system, can play idle sounds and when interacting with entity, all optional</p> <pre><code>sounds:\n  step: &lt;Sound&gt;\n  ambient: &lt;Sound&gt;\n  death: &lt;Sound&gt;\n  hurt: &lt;Sound&gt;\n  splash: &lt;Sound&gt;\n  swim: &lt;Sound&gt;\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#sound","title":"Sound","text":"<pre><code>ambient:\n    sound: \"minecraft:entity.pig.ambient\" # (1)!\n    volume: ... # (2)!\n    pitch: ... # (3)!\n    pitchRange: ... # (4)!\n    category: ... # (5)!\n</code></pre> <ol> <li>Sound to play, anything in <code>/playsound</code> works here</li> <li>Default <code>1.0</code>, Volume of the sound</li> <li>Default <code>1.0</code>, Pitch of the sonud </li> <li>Default <code>0.2</code>, range pitch can go up or down by randomly</li> <li>Default <code>MASTER</code>, Any of SoundCategory</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#display-name","title":"Display name","text":"<p>Name to display in chat when killed by entity.</p> <pre><code>displayName: \"&lt;red&gt;Scary Pig\" # (1)!\n</code></pre> <ol> <li>Any string, parsed with MiniMessage</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#bucketable","title":"Bucketable","text":"<p>Allows entity to be picked up by a bucket</p> <pre><code>bucketable:\n   bucketLiquidRequired: WATER # (1)!\n   bucketItem: { prefab: myplugin:custom_bucket } # (2)!\n</code></pre> <ol> <li>Type of bucket player needs to be holding to pick up mob (WATER, LAVA)</li> <li>The item to give when bucketing the mob</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/","title":"Prevent","text":"<p>Components that override vanilla behaviour, most of these will listen to events and cancel them.</p>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#any-entity","title":"Any entity","text":""},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#interaction","title":"Interaction","text":"<p>Prevents different types of interaction. If passed list is empty, will prevent all.</p> <pre><code>prevent.interaction: [ ATTACK ] # (1)!\n</code></pre> <ol> <li>Available options: <code>ATTACK</code>, <code>RIGHT_CLICK</code></li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#regeneration","title":"Regeneration","text":"<p>Prevents different types of regeneration events. If passed list is empty, will prevent all.</p> <pre><code>prevent.regeneration: [ REGEN, MAGIC ] # (1)!\n</code></pre> <ol> <li>Available options: any of EntityRegainHealthEvent.RegainReason\"</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#prevent-riding","title":"Prevent riding","text":"<p>Cancels VehicleEnterEvent on this entity.</p> <pre><code>prevent.riding: true\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#animals","title":"Animals","text":""},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#breeding","title":"Breeding","text":"<p>Cancels EntityEnterLoveModeEvent and EntityBreedEvent.</p> <pre><code>prevent.breeding: { }\n</code></pre>"},{"location":"geary-minecraft/content-packs/spawning/","title":"Creating spawns","text":"<p>Spawns are defined under <code>plugins/Geary/spawns/&lt;namespace&gt;</code>. Each file can contain multiple spawns, and within one file, entries may <code>inherit</code> other entries.</p> <p>Tip</p> <p>You can see a list of conditions for spawns at Action system conditions, any block condition will work here, as well as <code>mythicConditions</code> for conditions that aren't yet implemented by Geary.</p> <p>A quick overview of most features by example:</p> <pre><code>my_template:\n  position: GROUND # We support GROUND, AIR, WATER\n  priority: 1 # When multiple spawns are available, roll a weighted die with this value\n  regions: [ layerone ] # WorldGuard regions to limit spawns to\n  conditions: # Geary conditions from the action &amp; observer system\n    - mythicConditions:\n        - lightlevelfromblocks{l=0}\n    - maxNearby:\n        amount: 3\n  amount: 2-3 # Random range of mobs to spawn in a group\n  spread: 7 # The horizontal spread for them\n  ySpread: 1 # And the vertical spread\n\n# Inherits all tags from the other config\nmy_mob_spawn:\n  inherit: my_template\n  type: mm:my_mythic_mob # Specifies a MythicMob to spawn, swap out mm for a namespace for Geary mobs\n  conditions:\n    - $inherit # Since we're overriding the `conditions` block, we need to manually specify we want to merge the lists\n    - $remove maxNearby # Don't inherit maxNearby\n    - blockBelow:\n         allow: [ grass_block ]\n\nmy_mob_spawn_2: ...\n</code></pre>"},{"location":"geary-minecraft/content-packs/spawning/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Creating spawns</li> <li>Technical overview</li> </ul>"},{"location":"geary-minecraft/content-packs/spawning/overview/","title":"Technical overview","text":"<p>Geary-papermc provides a spawning system, with integrations for MythicMobs mobs. This page goes over exactly how the spawning system picks blocks and entities to spawn.</p>"},{"location":"geary-minecraft/content-packs/spawning/overview/#technical-overview","title":"Technical overview","text":"<p>The system runs each tick, on all players on the server with the following logic:</p>"},{"location":"geary-minecraft/content-packs/spawning/overview/#location-picking","title":"Location picking","text":"<ul> <li>Find a position minDistance to maxDistance horizontally away from the player, as well as maxVerticalDistance above or below the player.<ul> <li>Occasionally bias towards a GROUND location by getting the highest solid block in the allowed vertical range.</li> </ul> </li> <li>Ensure this location is at least minDistance away from ALL other players.</li> <li>Categorize the location into one of the following spawn position types: GROUND, IN_BLOCK, AIR, WATER, LAVA.</li> </ul>"},{"location":"geary-minecraft/content-packs/spawning/overview/#spawn-picking","title":"Spawn picking","text":"<ul> <li>Check all WorldGuard regions at the chosen location and pick any spawns matching these regions.</li> <li>Filter these spawns by the block's spawn position.</li> <li>Calculate nearby mob caps and filter out any spawns whose types exceed these caps.</li> <li>Use a weighted random selection to pick a spawn from the remaining spawns, based on the spawn's <code>priority</code>.</li> <li>Ensure its additional conditions are met. Don't retry if the spawn is invalid, since we want lower priority to mean less common spawns</li> </ul>"},{"location":"geary-minecraft/content-packs/spawning/overview/#spawn-spread","title":"Spawn spread","text":"<ul> <li>For spawns with a spread or ySpread defined, use a normal distribution with standard deviation equal to the spread to pick a new location, if the location's position type is the same as the spawn's, try to spawn there.</li> <li>For any spawn that would cause a mob to overlap with a block's hitbox, leading to suffocation, attempt to move the entity up to avoid this, removing the entity if no valid spawn position is found.</li> </ul>"},{"location":"geary-minecraft/developers/","title":"Setup","text":"<p>Add geary-papermc to your gradle project:</p> <pre><code>repositories {\n    maven(\"https://repo.mineinabyss.com/releases\")\n}\n\ndependencies {\n    implementation(\"com.mineinabyss:geary-papermc:$gearyVersion\")\n}\n</code></pre> <p>Note</p> <p>Depend on <code>geary-papermc</code> to get all supported addons automatically, or <code>geary-papermc-core</code> for just the API.</p>"},{"location":"geary-minecraft/developers/#initialize-your-plugin","title":"Initialize your plugin","text":"<p>The Geary-papermc plugin initializes Geary with some useful addons like prefabs and serialization. Other plugins can further configure Geary with their own addons on server startup. Learn more about creating configurable addons here</p> <p>Create a Geary addon anywhere in your code, we recommend a top level variable:</p> <pre><code>val MyCustomAddon = createAddon&lt;Unit&gt;(\"My plugin\", configuration = {\n    // Install and configure any other addons you like here\n    autoscan(classLoader, \"my.plugin.package\") {\n        // Register all serializable classes for use in prefabs/persisting data\n        components()\n    }\n    install(SomeOtherAddon)\n}) {\n    // Use this block for logic that should run after everything is configured,\n    // this includes registering system, creating any custom entities, or startup logic\n\n    systems {\n        yourSystemHere()\n    }\n\n    onStart {\n        // Your startup logic\n    }\n}\n</code></pre> <p>Install your addon in your plugin's <code>onLoad()</code> function like so:</p> <pre><code>override fun onLoad() {\n    gearyPaper.configure {\n        install(MyCustomAddon)\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Setup</li> <li>Loading prefabs</li> <li>Persistent data</li> <li>Tracked entities</li> </ul>"},{"location":"geary-minecraft/developers/persistentdatacontainer/","title":"Persistent data","text":"<p>The module <code>geary-papermc-datastore</code> (included in <code>geary-papermc</code>) provides functions for encoding and decoding serializable classes (using kotlinx.serialization) for any persistent data container.</p> <p>This may can be useful for types that aren't supported in geary, but which do have a PDC (ex chunks), or for users that just want to read/write data, and not use a full ECS.</p>"},{"location":"geary-minecraft/developers/persistentdatacontainer/#syntax","title":"Syntax","text":"<p>Persisting components must be marked <code>@Serializable</code> and have a serial name in the form of <code>@SerialName(\"namespace:key\")</code>. The SerialName will be used as a key in the PDC.</p> <pre><code>@Serializable\n@SerialName(\"myplugin:money\")\nclass Money(amount: Int)\n\nval pdc: PersistentDataContainer\n\npdc.encode(Money(100))\npdc.decode&lt;Money&gt;()\n</code></pre>"},{"location":"geary-minecraft/developers/prefabs/","title":"Loading prefabs","text":"<p>Geary uses prefabs to define custom mob, item, or block types. These are just entities with a unique key, which we use to persist information ingame. For instance, items and mobs store a prefab key in their persistent data container, and blocks let you directly access a prefab based on their blockdata.</p> <p>Geary will automatically load prefabs under <code>plugins/Geary/&lt;namespace&gt;/...</code>. However, you may want your configs to be kept in your own plugin folder instead, or package them directly with your jar file. For this, use the <code>Prefabs</code> addon as shown below.</p>"},{"location":"geary-minecraft/developers/prefabs/#load-prefabs-from-code","title":"Load prefabs from code","text":"<p>You may create prefabs from arbitrary entities, the prefabs addon provides some helper functions for this:</p> <pre><code>namespace(\"my_namespace\") {\n    prefabs {\n        create(\n            // creates prefab with key my_namespace:name\n            \"name\" to geary.entity {\n                set(MyCustomData())\n            },\n            ...\n        )\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/prefabs/#load-prefabs-from-your-jar-resources","title":"Load prefabs from your jar resources","text":"<p>Plugins can load prefabs from their jar's resources</p> <pre><code>namespace(\"my_namespace\") {\n    prefabs {\n        // We pass a reference to our plugin class to use the correct classLoader\n        fromJarResources(MyPlugin::class, \"prefab1.yml\", \"folder/prefab2.yml\")\n\n        // You can also load all prefabs inside a folder, including subfolders\n        fromJarResourceDirectory(MyPlugin::class, \"prefabs\")\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/prefabs/#load-prefabs-from-files","title":"Load prefabs from files","text":"<pre><code>namespace(\"my_namespace\") {\n    prefabs {\n        // Load specific prefab files\n        fromFiles(dataFolder.toPath() / \"my-prefab.yml\", ...)\n\n        // Load all prefabs in a folder on the filesystem\n        fromDirectory(dataFolder.toPath() / \"prefabs\")\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/items/","title":"Items","text":"<p>Geary provides item tracking in player inventories. For any other case, you may use the item's PDC to read/write data, but no entity will be tracked in Geary.</p>"},{"location":"geary-minecraft/developers/tracked-entities/items/#tracking","title":"Tracking","text":"<p>The player inventory will automatically load items with serialized prefabs. If an item is removed, the entity gets removed with it.</p>"},{"location":"geary-minecraft/developers/tracked-entities/items/#getting-an-item-entity","title":"Getting an item entity","text":""},{"location":"geary-minecraft/developers/tracked-entities/items/#gearyinventory","title":"GearyInventory","text":"<p>GearyInventory provides functions similar to <code>player.inventory</code>, but they return GearyEntity.</p> <pre><code>val player: Player\n\nval inv = player.inventory.toGeary()\n\ninv.itemInMainHand\ninv.get(EquipmentSlot.HEAD)\ninv.itemOnCursor // only works in survival mode\ninv.get(10)\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/items/#modifying-an-itemstack","title":"Modifying an ItemStack","text":"<pre><code>val gearyItem: GearyEntity\n\n// changes are reflected in inventory\ngearyItem.get&lt;ItemStack&gt;().amount = 10\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/mobs/","title":"Mobs","text":"<p>Note</p> <p>To avoid confusion, Geary comes with a <code>BukkitEntity</code> typealias for Bukkit's <code>Entity</code> interface.</p> <p>All bukkit entities get a geary entity created for them when spawned (and removed when despawned.)</p>"},{"location":"geary-minecraft/developers/tracked-entities/mobs/#entity-syntax","title":"Entity syntax","text":"<pre><code>val pig: Pig\n\n// Get the associated geary entity\nval gearyPig = pig.toGeary()\npig.set(SomeData())\n\n// Get the bukkit entity using components\npig.get&lt;BukkitEntity&gt;()\npig.toBukkit() // equivalent\n\n// each entity gets both the BukkitEntity component, and the specific instance\npig.get&lt;Pig&gt;()\npig.toBukkit&lt;Pig&gt;() // attempts to cast get&lt;BukkitEntity&gt;()\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/mobs/#persisting-data","title":"Persisting data","text":"<p>Any persisting components will be saved and loaded to the mob's persistent data container on NBT save/load. </p> <pre><code>@Serializable\n@SerialName(\"myplugin:owner\")\nclass Owner(\n    val uuid: @SerializableWith(UUIDSerializer::class) UUID\n)\n\nval pig: Pig\nval player: Player\n\npig.setPersisting(Owner(player.uniqueId))\n</code></pre>"},{"location":"other-plugins/deeperworld/","title":"DeeperWorld","text":"<p> GitHub</p> <p>Note</p> <p>While we use this plugin on the Mine in Abyss server, we don't currently have any features for migrating configs. Please test things before updating!</p>"},{"location":"other-plugins/deeperworld/#installation","title":"Installation","text":"<ul> <li>Download DeeperWorld</li> <li>Download Idofront to provide all the dependencies we need</li> <li>Place the downloaded files into your <code>plugins</code> folder</li> <li>Set up your sections as explained in Defining Sections and start the server</li> </ul>"},{"location":"other-plugins/deeperworld/#extra-help","title":"Extra help","text":"<p>Please contact us in  <code>#plugin-dev</code>.</p>"},{"location":"other-plugins/deeperworld/SUMMARY/","title":"SUMMARY","text":"<ul> <li>About</li> <li>Defining Sections</li> </ul>"},{"location":"other-plugins/deeperworld/defining-sections/","title":"Defining Sections","text":""},{"location":"other-plugins/deeperworld/defining-sections/#creating-your-world","title":"Creating your world","text":"<p>It is up to you to create your sections however you like, with whatever overlap you like.</p>"},{"location":"other-plugins/deeperworld/defining-sections/#deeperworld-simply-needs-to-know","title":"DeeperWorld simply needs to know:","text":"<ul> <li>X-Z coordinates of two corners of each section.</li> <li>A reference location on one section, and where the corresponding location is in the next.</li> </ul>"},{"location":"other-plugins/deeperworld/defining-sections/#configuring","title":"Configuring","text":"<p>Open The plugin config file under <code>plugins/DeeperWorld/config.yml</code>.</p>"},{"location":"other-plugins/deeperworld/defining-sections/#what-youll-be-defining","title":"What you'll be defining:","text":"<p>As you can see in this masterpiece of an illustration, DeeperWorld automatically knows the overlap to synchronize just by defining two locations.</p> <p>There is also no restriction on differently sized regions. DeeperWorld will prevent teleports between two sections (red area) by bouncing players up/down if they would otherwise result in teleporting out of bounds.</p>"},{"location":"other-plugins/deeperworld/defining-sections/#example-config","title":"Example config","text":"<p>The plugin comes with an example config similar to the following:</p> <pre><code>sections:\n  - name: section1 #(1)\n    refTop: [0, 0, 0]\n    refBottom: [0, 16, 0] #(2)\n    region: [0, 0, 1000, 1000] #(3)\n    world: world\n  - name: section2\n    refTop: [1000, 240, 0] #(4)\n    refBottom: [2000, 16, 0] #(5)\n    region: [1000, 0, 2000, 1000]\n    world: world\n</code></pre> <ol> <li>Will show up when using /dw linfo</li> <li>A location in this section that corresponds to the lower section's <code>refTop</code></li> <li>Corners for this section (x1, z1, x2, z2)</li> <li>A location in this section that corresponds to the higher section's <code>refBottom</code></li> <li>Since this is the last section, the bottom won't matter</li> </ol>"},{"location":"server-configs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Introduction</li> <li>Config types</li> </ul>"},{"location":"server-configs/config-types/","title":"Config types","text":"<p>We use several plugins across our configs, this page will try to link to the appropriate documentation and explain what each plugin does.</p>"},{"location":"server-configs/config-types/#geary","title":"Geary","text":"<p>Geary is our own plugin for creating custom items, blocks, and mob spawning. These configs follow a very similar pattern, you create prefab files under <code>pluigns/Geary/prefabs</code> which are just a list of \"components\" that describe what the prefab is. For example, the <code>set.item</code> component tells Geary a prefab is an item and should have a certain name, lore, custom model data, etc...</p> <p>Note that Geary mostly doesn't enforce a file structure. We try to keep files organized ourselves but there is no strict format to follow. Here are some example file locations under the <code>feat</code> folder:</p> Example Path Mob drop <code>items/plugins/Geary/prefabs/mineinabyss/items/drops/abyssal_snail</code> Mob spawns for layer 1 hostile mobs <code>mobs/plugins/Geary/spawns/mineinabyss/layer1/hostile.yml</code> Custom recipe for a vanilla item <code>items/plugins/Geary/prefabs/minecraft/recipes/book.yml</code> Bamboo chair furniture piece <code>blocks/plugins/Geary/prefabs/mineinabyss/blocks/furniture/bamboo/bamboo_chair.yml</code> Crate block <code>blocks/plugins/Geary/prefabs/mineinabyss/blocks/building/crate1.yml</code> Prefab that prevents allays from regenerating <code>mobs/plugins/Geary/prefabs/mineinabyss/mobs/custom_allay.yml</code> <p>Read the Geary docs here.</p>"},{"location":"server-configs/config-types/#mythicmobs","title":"MythicMobs","text":"<p>MythicMobs is a popular plugin for creating custom mobs with custom behaviours. It comes with many features, but we mostly just use it for creating our custom mobs and for its extensive \"skill\" system which lets us define fancy actions for mobs (ex. how the Silkfang shoots webs at players that stun them for a few seconds.)</p> <p>Example configs:</p> Example Path The mob file for a Silkfang <code>mobs/plugins/MythicMobs/mobs/mineinabyss/hostile/silkfang.yml</code> The skills used by a Silkfang <code>mobs/plugins/MythicMobs/skills/mineinabyss/hostile/silkfang.yml</code> <p>Read the MythicMobs docs here.</p>"},{"location":"server-configs/intro/","title":"Introduction","text":"<p>Our server configs are publicly visible on GitHub here. This guide will explain the structure we use for our configs and how to edit them in your browser. Further pages will explain the syntax for different plugins we use.</p>"},{"location":"server-configs/intro/#editing-configs-on-the-web","title":"Editing configs on the web","text":"<p>GitHub has a web editor built in which makes editing configs much easier. Create a GitHub account and sign in. Next, visit the server config page and press <code>.</code> to open the editor:</p> <p></p> <p>Example showing the GitHub web editor</p> <p></p> <p>Download the YAML extension from the left sidebar to get helpful code completion for the config files!</p>"},{"location":"server-configs/intro/#file-structure","title":"File structure","text":"<p>Most server configs are stored in the <code>feat</code> folder, these are split into separate features which different servers can choose to include, as defined in <code>keepup/configs.yml</code>. This means multiple features can dynamically put configs into the same folders, for example <code>feat/mobs</code> defines MythicMobs config files, but so does <code>feat/pets</code>, on startup both will have their configs combined the same folder.</p>"},{"location":"server-configs/intro/#uploading-your-changes","title":"Uploading your changes","text":"<p>On the bottom left of your editor, you'll see the current branch you're working on, in this case <code>develop</code>.</p> <p>You may click on it to create your own branch to work on changes (GitHub will ask if you want to \"fork\" this repo because you don't have permission to push to it directly, click yes and a copy will be made on your account).</p> <p>Whenever you start working on something, we recommend swapping back to the <code>develop</code> branch, clicking the sync icon next to it to get the latest changes, and then creating a new branch for your work, ex. <code>fix-mob-spawning</code>.</p> <p>The changes you make in your browser aren't automatically uploaded. To do so you need to \"commit\" them. Click on the source control button to the left and type a meaningful message describing what you changed.</p> <p></p> <p>Click <code>Commit &amp; Push</code> to upload the changes to your branch.</p>"},{"location":"server-configs/intro/#getting-your-changes-on-the-server","title":"Getting your changes on the server","text":"<p>You can make as many commits as you like, just try to keep messages meaningful. Once you're done, you can click the   icon near the top of the previous image to create a \"Pull request\".</p> <p></p> <p>Enter a title and description and choose what \"base\" branch you're requesting to place your changes into, this should almost always be <code>MineInAbyss/develop</code></p> <p>After making a pull request, you'll be able to see it back on the server config GitHub page, someone will review it and potentially leave comments, and you can continue to commit to the branch the request was made on to update the PR. Eventually it will get \"merged\" into the develop branch and your changes will be live on the development server, ready for the next major update.</p>"}]}